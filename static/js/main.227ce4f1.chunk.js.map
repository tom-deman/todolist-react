{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/Todo.jsx","App.jsx","index.js"],"names":["buttonClass","Button","filter","match","filterTodos","children","className","onClick","Input","addTodo","type","placeholder","onKeyDown","event","Todo","todoContent","editTodo","todoCheck","toggleCheckTodo","deleteTodo","useState","edit","setEdit","useEffect","todoClass","checked","onChange","defaultValue","key","target","value","trim","editTodoCall","onDoubleClick","propType","PropTypes","string","isRequired","func","bool","App","todosTabs","setTodosTabs","error","setError","wichError","setWichError","setFilter","setKey","todo","a","completed","content","startTimerError","setTimeout","index","findIndex","el","newTab","splice","length","some","element","edited","map","id","Math","random","toString","substr","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.227ce4f1.chunk.js","sourcesContent":["import React     from 'react'\nimport PropTypes from 'prop-types'\n\nconst buttonClass = 'text-sm hover:bg-blue-500 mx-4 py-2 px-4 text-white hover:text-white rounded focus:outline-none'\n\n\nconst Button = ({\n    filter,\n    match,\n    filterTodos,\n    children\n}) =>\n    <button\n        className = { filter === match ? `${ buttonClass } bg-blue-500` : `${ buttonClass } bg-blue-300` }\n        onClick   = { filterTodos }\n    >\n        { children }\n    </button>\n\n\nButton.propTypes = {\n    filter     : PropTypes.string.isRequired,\n    match      : PropTypes.string.isRequired,\n    filterTodos: PropTypes.func.isRequired,\n    children   : PropTypes.node.isRequired\n}\n\n\nexport default Button\n","import React     from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst Input = ({ addTodo }) =>\n    <input\n        type        = \"text\"\n        className   = \"border border-gray-700 text-sm font-thin text-center w-4/5 py-3 rounded focus:outline-none\"\n        placeholder = \"Enter your todo here and press enter\"\n        onKeyDown   = { event => addTodo( event ) }\n    />\n\n\nInput.propTypes = {\n    addTodo: PropTypes.func\n}\n\nexport default Input\n","import React, {\n    useState,\n    useEffect\n} from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst Todo = ({\n    todoContent,\n    editTodo,\n    todoCheck,\n    toggleCheckTodo,\n    deleteTodo\n}) => {\n    const [ edit, setEdit ] = useState( false )\n\n\n    useEffect( () => { setEdit( false ) }, [ todoContent ] )\n\n    const putInputEdit = () =>\n        setEdit( true )\n\n    const editTodoCall = event => {\n        if( event.key === 'Enter' ) {\n            if( event.target.value !== todoContent ) {\n                const value = event.target.value.trim()\n                editTodo( value )\n            }\n            else setEdit( false )\n        }\n    }\n\n    const todoClass   = 'rounded border border-gray-700 py-4 w-4/5 my-4 flex justify-between px-6'\n    const inputClass  = 'border border-gray-700 py-1 px-2 rounded w-3/5 font-light text-sm text-center focus:outline-none'\n    const buttonClass = 'rounded bg-red-400 hover:bg-red-500 text-white py-2 px-3 text-sm font-light focus:outline-none'\n\n\n    return(\n        <>\n            <div className={ todoCheck ? `bg-green-300 ${ todoClass }` : todoClass }>\n                <input\n                    type      = \"checkbox\"\n                    checked   = { todoCheck }\n                    className = \"mt-3\"\n                    onChange  = { () => toggleCheckTodo() }\n                />\n                { edit\n                    ?\n                        <input\n                            defaultValue = { todoContent }\n                            type         = \"text\"\n                            className    = { inputClass }\n                            onKeyDown    = { event => editTodoCall( event ) }\n                        />\n                    :\n                        <p\n                            className     = \"mt-2 text-sm font-light\"\n                            onDoubleClick = { () => putInputEdit() }\n                        >\n                            { todoContent }\n                        </p>\n                }\n                <button\n                    className = { buttonClass }\n                    onClick   = { () => deleteTodo() }\n                >\n                    delete\n                </button>\n            </div>\n        </>\n    )\n}\n\n\nTodo.propType = {\n    todoContent    : PropTypes.string.isRequired,\n    editTodo       : PropTypes.func.isRequired,\n    todoCheck      : PropTypes.bool.isRequired,\n    toggleCheckTodo: PropTypes.func.isRequired,\n    deleteTodo     : PropTypes.func.isRequired\n}\n\n\nexport default Todo\n","import React, {\n    StrictMode,\n    useState\n} from 'react'\n\n\nimport './assets/css/tailwind.css'\n\nimport Button from './components/Button'\nimport Input  from './components/Input'\nimport Todo   from './components/Todo'\n\n\nconst App = () => {\n    const [ todosTabs, setTodosTabs ] = useState( [] )\n    const [ error, setError ]         = useState( false )\n    const [ wichError, setWichError ] = useState( [] )\n    const [ filter, setFilter ]       = useState( 'All' )\n    const [ key, setKey ]             = useState( 1 )\n\n\n    const todo = a => {\n        return(\n            <Todo\n                key             = { a.key }\n                todoCheck       = { a.completed }\n                todoContent     = { a.content }\n                toggleCheckTodo = { () => toggleCheckTodo( a.content ) }\n                deleteTodo      = { () => deleteTodo( a.content ) }\n                editTodo        = { ( value ) => editTodo( value, a.content ) }\n            />\n        )\n    }\n\n\n    const buttonTabs = [\n        'All',\n        'To do',\n        'Done'\n    ]\n\n\n    const startTimerError = () => {\n        setError( true )\n        setTimeout( () => setError( false ) , 2000 )\n    }\n\n    const uniqueId = () =>\n        Math.random().toString( 36 ).substr( 2, 9 )\n\n    const toggleCheckTodo = content => {\n        const index  = todosTabs.findIndex( el => el.content === content )\n        const newTab = todosTabs\n        newTab[ index ].completed = !newTab[ index ].completed\n        setTodosTabs([ ...newTab ])\n    }\n\n    const deleteTodo = ( content ) => {\n        const index  = todosTabs.findIndex( el => el.content === content )\n        const newTab = todosTabs\n        newTab.splice( index, 1 )\n        setTodosTabs([ ...newTab ])\n    }\n\n    const filterTodos = element => {\n        switch( element ) {\n            case 'All'  : setFilter( 'All' )\n                break\n            case 'To do': setFilter( 'To do' )\n                break\n            case 'Done' : setFilter( 'Done' )\n                break\n            // no default\n        }\n    }\n\n\n    const addTodo = event => {\n        if( event.key === 'Enter' ) {\n            if( !event.target.value.trim() ) {\n                startTimerError()\n                setWichError( 'Error - Enter at least one charachter' )\n            }\n            else if( event.target.value.length >= 80 ) {\n                startTimerError()\n                setWichError( 'Error - This todo is too long' )\n            }\n\n            else if( event.target.value.trim() && event.target.value.length < 80 ) {\n                const todo = event.target.value.trim()\n\n                if ( todosTabs.some( element => element.content === todo ) ) {\n                    startTimerError()\n                    setWichError( 'Error - This todo is already taken' )\n                }\n                else {\n                    setTodosTabs([ ...todosTabs, {\n                        content  : todo,\n                        id       : uniqueId(),\n                        key      : key,\n                        edited   : false,\n                        completed: false\n                    } ])\n                    setKey( key + 1 )\n                    setWichError( '' )\n                    event.target.value= ''\n                }\n            }\n        }\n    }\n\n\n    const editTodo = ( value, content ) => {\n        if( !value.trim() ) {\n            startTimerError()\n            setWichError( 'Error - Enter at least one charachter' )\n        }\n        else if( value.length >= 80 ) {\n            startTimerError()\n            setWichError( 'Error - This todo is too long' )\n        }\n        else if( value.trim() && value.length < 80 ) {\n            const todo = value.trim()\n\n            if( todosTabs.length > 0 ) {\n                if ( todosTabs.some( element => element.content === todo ) ) {\n                    startTimerError()\n                    setWichError( 'Error - This todo is already taken' )\n                }\n                else {\n                    const index = todosTabs.findIndex( el => el.content === content )\n                    const newTab = todosTabs\n                    newTab[ index ].content = todo\n                    newTab[ index ].edited  = true\n                    setTodosTabs([ ...newTab ])\n                }\n            }\n        }\n    }\n\n\n    return(\n        <StrictMode>\n            <h1 className=\"text-center text-2xl font-light mt-12 text-gray-700\">\n                To do list - React\n            </h1>\n\n            <div className=\"w-full flex justify-center\">\n                <div className=\"mt-16 w-64 w-1/4 flex justify-center\">\n                    { buttonTabs.map( ( element, index ) => \n                        <Button\n                            key         = { index }\n                            filterTodos = { () => filterTodos( element ) }\n                            filter      = { filter }\n                            match       = { element }\n                        >\n                            { element }\n                        </Button>\n                    ) }\n                </div>\n            </div>\n\n            <div className=\"flex justify-center mt-8 mb-6\">\n                <Input addTodo={ event => addTodo( event ) } />\n            </div>\n\n            <div className=\"h-10\">\n                { error &&\n                    <p className=\"text-red-300 text-sm text-center\">\n                        { wichError }\n                    </p>\n                }\n            </div>\n\n            <hr className=\"border-gray-700 w-4/5 m-auto mb-16\" />\n\n            <div className=\"flex justify-center flex-wrap\">\n                { filter === 'All' && todosTabs\n                    .map( ( element, index ) =>\n                        todo( element, index )\n                    )\n                }\n                { filter === 'To do' && todosTabs\n                    .filter( element => !element.completed )\n                    .map( ( element, index ) =>\n                        todo( element, index )\n                    )\n                }\n                { filter === 'Done' && todosTabs\n                    .filter( element => element.completed )\n                    .map( ( element, index ) =>\n                        todo( element, index )\n                    )\n                }\n            </div>\n\n        </StrictMode>\n    )\n}\n\n\nexport default App\n","import React    from 'react'\nimport ReactDOM from 'react-dom'\nimport App      from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById( 'root' )\n)\n"],"sourceRoot":""}